package com.kwenta.test.generatedfiles;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.3.
 */
@SuppressWarnings("rawtypes")
public class Account extends Contract {
    public static final String BINARY = "6101e0604052348015610010575f80fd5b50604051613bdc380380613bdc83398101604081905261002f91610112565b60c08082015160e0808401515f80546001600160a01b03191690556001600160a01b03928316608090815290831660a0908152855184169094526020850151831690915260408401518216610100908152606085015183166101209081529185015183166101409081529385015183166101605284015182166101805283015181166101a052910151166101c0526101ea565b60405161016081016001600160401b03811182821017156100f157634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b038116811461010d575f80fd5b919050565b5f6101608284031215610123575f80fd5b61012b6100c2565b610134836100f7565b8152610142602084016100f7565b6020820152610153604084016100f7565b6040820152610164606084016100f7565b6060820152610175608084016100f7565b608082015261018660a084016100f7565b60a082015261019760c084016100f7565b60c08201526101a860e084016100f7565b60e08201526101006101bb8185016100f7565b908201526101206101cd8482016100f7565b908201526101406101df8482016100f7565b908201529392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516138a76103355f395f81816102cd015281816111fe015261218201525f8181612035015281816121b20152612b0c01525f8181610598015281816108fe0152818161178b01528181611fa6015261211201525f6115ef01525f61104e01525f6118e801525f81816106ec01528181611c2101528181611d6201528181611f4d01526120b901525f818161079201528181610b7d01528181610c8e01528181610ed101528181610f2e0152818161100501528181611cd301528181611e2501528181611ee7015281816122c30152818161267a015261283301525f8181610e580152610f8b01525f81816101d901528181610a43015281816116d5015281816116fd015281816127690152612bcd01525f818161046e01526128be01526138a75ff3fe608060405260043610610134575f3560e01c806385652fec116100a8578063cdf8972e1161006d578063cdf8972e146103f3578063d6c7ef8b1461041f578063e71bdf411461043e578063eff557a71461045d578063f2fde38b14610490578063ffa1ad74146104af575f80fd5b806385652fec146103565780638da5cb5b146103755780638f32d59b1461039357806394e05b2c146103b1578063a4890337146103de575f80fd5b806361383805116100f9578063613838051461028957806367e7646f1461029d5780636afdd850146102bc57806372a69c0d146102ef57806378e91014146103035780638322fff21461032f575f80fd5b80631928b3cb1461013f578063472d0447146101c85780634c2eefb414610213578063587cde1e14610236578063608d60eb14610274575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5061015e610159366004612f02565b6104ca565b6040516101bf91905f60a08201905067ffffffffffffffff8084511683528060208501511660208401525060408301516001600160801b03808216604085015280606086015116606085015250506080830151600f0b608083015292915050565b60405180910390f35b3480156101d3575f80fd5b506101fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101bf565b34801561021e575f80fd5b5061022860165481565b6040519081526020016101bf565b348015610241575f80fd5b50610264610250366004612f2d565b60016020525f908152604090205460ff1681565b60405190151581526020016101bf565b610287610282366004612f89565b61056b565b005b348015610294575f80fd5b506102286106c9565b3480156102a8575f80fd5b506102876102b7366004612f2d565b610764565b3480156102c7575f80fd5b506101fb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102fa575f80fd5b506102646107ed565b34801561030e575f80fd5b5061032261031d366004612f02565b610817565b6040516101bf9190612ff0565b34801561033a575f80fd5b506101fb73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b348015610361575f80fd5b50610287610370366004612f02565b6108d1565b348015610380575f80fd5b505f546101fb906001600160a01b031681565b34801561039e575f80fd5b505f546001600160a01b03163314610264565b3480156103bc575f80fd5b506103d06103cb366004612f02565b610d04565b6040516101bf9291906130cb565b3480156103e9575f80fd5b5061022860155481565b3480156103fe575f80fd5b5061041261040d366004612f02565b610d68565b6040516101bf9190613109565b34801561042a575f80fd5b50610287610439366004612f2d565b610e4d565b348015610449575f80fd5b50610287610458366004612f2d565b610f00565b348015610468575f80fd5b506101fb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561049b575f80fd5b506102876104aa366004612f2d565b610f5d565b3480156104ba575f80fd5b5061022864322e312e3360d81b81565b6040805160a0810182525f808252602082018190529181018290526060810182905260808101919091526104fd82611036565b60405163055f575160e41b81523060048201526001600160a01b0391909116906355f575109060240160a060405180830381865afa158015610541573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061056591906131e2565b92915050565b60185460020361058e5760405163558a1e0360e11b815260040160405180910390fd5b60026018819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663125127b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106169190613289565b6106335760405163274ccc0360e01b815260040160405180910390fd5b82818114610657576040516001621398b960e31b0319815260040160405180910390fd5b5f5b818110156106bc576106b4868683818110610676576106766132a2565b905060200201602081019061068b91906132b6565b85858481811061069d5761069d6132a2565b90506020028101906106af91906132d4565b6110dc565b600101610659565b5050600160185550505050565b6015546040516370a0823160e01b81523060048201525f91906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610731573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107559190613317565b61075f9190613342565b905090565b61076d8161151a565b60405163a91ee30560e01b81523360048201526001600160a01b0382811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063a91ee305906044015b5f604051808303815f87803b1580156107d4575f80fd5b505af11580156107e6573d5f803e3d5ffd5b5050505050565b5f80546001600160a01b031633148061075f575050335f9081526001602052604090205460ff1690565b60408051610120810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915261086882611036565b60405163645c04d560e11b81523060048201526001600160a01b03919091169063c8b809aa9060240161012060405180830381865afa1580156108ad573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105659190613355565b6018546002036108f45760405163558a1e0360e11b815260040160405180910390fd5b60026018819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663125127b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610958573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061097c9190613289565b6109995760405163274ccc0360e01b815260040160405180910390fd5b6109a2816115ba565b6109cd57604051634316b3d560e01b8152600481018290523360248201526044015b60405180910390fd5b5f6109d782610d68565b5f83815260176020526040808220828155600181018390556002810183905560038101839055600480820184905560058201805460ff199081169091556006830194909455600790910180549093169092556080830151905163ee8ca3b560e01b8152918201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ee8ca3b5906024015f604051808303815f87803b158015610a8c575f80fd5b505af1158015610a9e573d5f803e3d5ffd5b505050505f610aab6116ca565b90505f610aba835f0151611036565b90505f80610ac78361187f565b915091508460e0015115610c1f5760405163055f575160e41b81523060048201525f906001600160a01b038516906355f575109060240160a060405180830381865afa158015610b19573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b3d91906131e2565b60800151600f0b9050801580610b5c5750610b5c818760400151611a20565b15610bed576080860151604051636b1f8e5360e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163d63f1ca691610bb5918b916001906004016133f8565b5f604051808303815f87803b158015610bcc575f80fd5b505af1158015610bde573d5f803e3d5ffd5b50505050505050505050610cfc565b60ff81901c5f0380820118604087015160ff81901c5f03908101181115610c1d57610c178161341d565b60408701525b505b5f85602001511315610c5157602085015160ff81901c5f039081011860155f828254610c4b9190613342565b90915550505b610c5f838660200151611a44565b610c728386604001518760c00151611aaf565b60808501516040516315a2093760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163568824dc91610cc9918a9187908a908890600401613437565b5f604051808303815f87803b158015610ce0575f80fd5b505af1158015610cf2573d5f803e3d5ffd5b5050505050505050505b506001601855565b5f6060610d10836115ba565b9150306001600160a01b03166385652fec84604051602401610d3491815260200190565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050509050915091565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915260175f8381526020019081526020015f20604051806101000160405290815f820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015f9054906101000a900460ff166001811115610e1957610e196130e5565b6001811115610e2a57610e2a6130e5565b81526006820154602082015260079091015460ff16151560409091015292915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e95576040516282b42960e81b815260040160405180910390fd5b5f80546001600160a01b0319166001600160a01b038381169182178355604051631603369d60e31b8152600481019390935260248301919091527f0000000000000000000000000000000000000000000000000000000000000000169063b019b4e8906044016107bd565b610f0981611b20565b604051633b57226b60e01b81523360048201526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690633b57226b906044016107bd565b610f6681611bc5565b604051630ba7288160e21b81526001600160a01b0382811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690632e9ca204906044015f604051808303815f87803b158015610fcc575f80fd5b505af1158015610fde573d5f803e3d5ffd5b5050604051631603369d60e31b81523360048201526001600160a01b0384811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063b019b4e891506044016107bd565b60405163e63bfadb60e01b8152600481018290525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e63bfadb90602401602060405180830381865afa15801561109b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110bf919061346c565b90506001600160a01b0381166110d7576110d7613487565b919050565b5f8360108111156110ef576110ef6130e5565b90506002811080611100575080600e145b8061110b575080600f145b1561126f575f546001600160a01b03163314611139576040516282b42960e81b815260040160405180910390fd5b5f84601081111561114c5761114c6130e5565b0361116257823561115c81611c0f565b50611514565b6001846010811115611176576111766130e5565b0361118657823561115c81611e5f565b600e84601081111561119a5761119a6130e5565b036111d3575f8036816111af87876002611f1e565b9150915086359350602087013592506111ca84848484611f3a565b50505050611514565b82365f6111e283866006611f1e565b6040516302b67b5760e41b815291935091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b67b570906112399033908790879087906004016134d8565b5f604051808303815f87803b158015611250575f80fd5b505af1158015611262573d5f803e3d5ffd5b505050505050505b611514565b6112776107ed565b611293576040516282b42960e81b815260040160405180910390fd5b60048110156112d85760028460108111156112b0576112b06130e5565b036112cd57823560208401356112c68282611a44565b5050611514565b823561115c81612323565b60068110156113365760048460108111156112f5576112f56130e5565b036113195782356020840135604085013561131183838361235b565b505050611514565b82356020840135604085013560608601356111ca8484848461239e565b6008811015611380576006846010811115611353576113536130e5565b0361136f57823560208401356040850135611311838383611aaf565b823560208401356112c68282612416565b600a8110156113ca57600884601081111561139d5761139d6130e5565b036113b957823560208401356040850135611311838383612452565b823560208401356112c68282612495565b600c81101561140257600a8460108111156113e7576113e76130e5565b036113f757823561115c816124d1565b823561115c816124fd565b600e81101561145e57600c84601081111561141f5761141f6130e5565b03611453578235602084013560408501356060860135608087013560a088013560c089013561126287878787878787612529565b823561115c8161270f565b806010036114f8577305f6f46e5eed6dec1d8cc3c6e8169d447966844d6001600160a01b0316630b33b12c6040518163ffffffff1660e01b81526004016020604051808303815f875af11580156114b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114db9190613289565b61126a57604051631b7d24bd60e31b815260040160405180910390fd5b604051636bb50f4f60e11b8152600481018290526024016109c4565b50505050565b5f546001600160a01b03163314611543576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038116158061157157506001600160a01b0381165f9081526001602052604090205460ff16155b1561159a5760405163a3653d9f60e01b81526001600160a01b03821660048201526024016109c4565b6001600160a01b03165f908152600160205260409020805460ff19169055565b5f806115c583610d68565b80519091506115d657505f92915050565b805160405163215aab9b60e21b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063856aae6c906024015f6040518083038186803b158015611637575f80fd5b505afa925050508015611648575060015b61165457505f92915050565b5f611669611664835f0151611036565b61187f565b5090505f8260a001516001811115611683576116836130e5565b0361169a576116928282612869565b949350505050565b60018260a0015160018111156116b2576116b26130e5565b036116c1576116928282612892565b505f9392505050565b5f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303611789577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015611756573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061177a9190613586565b509050611786816128bb565b90565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663062af0b06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117e5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118099190613317565b6040519091505f90339083908381818185875af1925050503d805f811461184b576040519150601f19603f3d011682016040523d82523d5f602084013e611850565b606091505b505090508061187b576040516333eed1d360e21b8152600481018390523360248201526044016109c4565b5090565b5f805f836001600160a01b031663cdf456e16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118be573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118e29190613317565b90505f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b798e8a846040518263ffffffff1660e01b815260040161193491815260200190565b6040805180830381865afa15801561194e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061197291906135b4565b90925090505f611983607842613342565b821015611a1357600190505f876001600160a01b031663d24378eb6040518163ffffffff1660e01b81526004016040805180830381865afa1580156119ca573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119ee91906135d6565b90945090508015611a115760405162bfc92160e01b815260040160405180910390fd5b505b9196919550909350505050565b5f8215801590611a2f57508115155b611a3b57611a3b613487565b505f9118121590565b5f811315611a5557611a558161297e565b604051631114790960e31b8152600481018290526001600160a01b038316906388a3c848906024015b5f604051808303815f87803b158015611a95575f80fd5b505af1158015611aa7573d5f803e3d5ffd5b505050505050565b6040516385f05ab560e01b81526004810183905260248101829052654b57454e544160d01b60448201526001600160a01b038416906385f05ab5906064015b5f604051808303815f87803b158015611b05575f80fd5b505af1158015611b17573d5f803e3d5ffd5b50505050505050565b5f546001600160a01b03163314611b49576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381161580611b7657506001600160a01b0381165f9081526001602052604090205460ff165b15611b9f5760405163a3653d9f60e01b81526001600160a01b03821660048201526024016109c4565b6001600160a01b03165f908152600160208190526040909120805460ff19169091179055565b5f546001600160a01b03163314611bee576040516282b42960e81b815260040160405180910390fd5b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f811315611d47576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd333060ff85901c5f03808601186040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015611ca4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cc89190613289565b506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166328ba84ca3360ff84901c5f03808501186040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015f604051808303815f87803b1580156107d4575f80fd5b5f811215611e5c57611d588161297e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb3360ff84901c5f03808501186040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303815f875af1158015611ddb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611dff9190613289565b5060405163b014da2160e01b815233600482015260ff82901c5f038083011860248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b014da21906044016107bd565b50565b8015611e5c576040515f90339083908381818185875af1925050503d805f8114611ea4576040519150601f19603f3d011682016040523d82523d5f602084013e611ea9565b606091505b5050905080611ecb57604051630ca79afd60e01b815260040160405180910390fd5b6040516379a4952760e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379a4952790604401611a7e565b365f805f611f2d8787876129cc565b9890975095505050505050565b5f80611f468484612a16565b915091505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614801561200f575060405163b5af090f60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b5af090f90602401602060405180830381865afa158015611feb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061200f9190613289565b156120b75761201d8761297e565b5060405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820188905233919084169063a9059cbb906044016020604051808303815f875af115801561208d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120b19190613289565b50612279565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614801561217b575060405163b5af090f60e01b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b5af090f90602401602060405180830381865afa158015612157573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061217b9190613289565b1561224d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166336c78516337f00000000000000000000000000000000000000000000000000000000000000006121da8b612a6d565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291831660248301528216604482015290861660648201526084015f604051808303815f87803b15801561222f575f80fd5b505af1158015612241573d5f803e3d5ffd5b50505050309050612279565b60405163ae943ea960e01b81526001600160a01b038085166004830152831660248201526044016109c4565b6122868188888888612a96565b604051633b9d50e760e01b81526001600160a01b0384811660048301528381166024830152828116604483015260648201899052608482018890527f00000000000000000000000000000000000000000000000000000000000000001690633b9d50e79060a4015f604051808303815f87803b158015612304575f80fd5b505af1158015612316573d5f803e3d5ffd5b5050505050505050505050565b806001600160a01b0316635a1cbd2b6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156107d4575f80fd5b6040516332f0510360e01b81526004810183905260248101829052654b57454e544160d01b60448201526001600160a01b038416906332f0510390606401611aee565b604051630787d6c360e41b8152600481018490526024810183905260448101829052654b57454e544160d01b60648201526001600160a01b0385169063787d6c30906084015f604051808303815f87803b1580156123fa575f80fd5b505af115801561240c573d5f803e3d5ffd5b5050505050505050565b604051635c8011c360e01b815260048101829052654b57454e544160d01b60248201526001600160a01b03831690635c8011c390604401611a7e565b6040516362d2583d60e11b81526004810183905260248101829052654b57454e544160d01b60448201526001600160a01b0384169063c5a4b07a90606401611aee565b60405163ed44a2db60e01b815260048101829052654b57454e544160d01b60248201526001600160a01b0383169063ed44a2db90604401611a7e565b60405163c70b41e960e01b81523060048201526001600160a01b0382169063c70b41e9906024016107bd565b604051636e672c0360e11b81523060048201526001600160a01b0382169063dcce5806906024016107bd565b845f0361254957604051630287a76760e01b815260040160405180910390fd5b5f86131561257b5761255a8661297e565b60ff86901c5f038087011860155f8282546125759190613600565b90915550505b5f612584612bbf565b90506040518061010001604052808981526020018881526020018781526020018681526020018281526020018560018111156125c2576125c26130e5565b815260200184815260200183151581525060175f60165481526020019081526020015f205f820151815f01556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015f6101000a81548160ff0219169083600181111561263f5761263f6130e5565b021790555060c0820151600682015560e0909101516007909101805460ff191691151591909117905560165460405163051b193f60e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163146c64fc916126c6919085908d908d908d908d908d908d908d90600401613613565b5f604051808303815f87803b1580156126dd575f80fd5b505af11580156126ef573d5f803e3d5ffd5b5050505060165f815461270190613668565b909155505050505050505050565b5f61271982610d68565b90505f8160200151131561274d57602081015160ff81901c5f039081011860155f8282546127479190613342565b90915550505b608081015160405163ee8ca3b560e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ee8ca3b5906024015f604051808303815f87803b1580156127b2575f80fd5b505af11580156127c4573d5f803e3d5ffd5b5050505f83815260176020526040808220828155600181018390556002810183905560038101839055600480820184905560058201805460ff19908116909155600683018590556007909201805490921690915560808501519151636b1f8e5360e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016945063d63f1ca693611a7e9388939092016133f8565b5f808360400151131561288457506060820151811115610565565b506060820151811015610565565b5f80836040015113156128ad57506060820151811015610565565b506060820151811115610565565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826040515f6040518083038185875af1925050503d805f8114612924576040519150601f19603f3d011682016040523d82523d5f602084013e612929565b606091505b505090508061297a5760405162461bcd60e51b815260206004820152601d60248201527f4f707352656164793a20455448207472616e73666572206661696c656400000060448201526064016109c4565b5050565b6129866106c9565b60ff82901c5f03808301181115611e5c5761299f6106c9565b60ff82901c5f0380830118604051631e58139d60e11b8152600481019290925260248201526044016109c4565b600581901b8301358301803590602080820191869003016129ed8184613600565b851015612a0d57604051633b99b53d60e01b815260040160405180910390fd5b50935093915050565b5f80612a228484612cc6565b91505b5f612a308585612cd8565b90508015612a4b57612a428585612d10565b94509450612a60565b612a558585612d36565b9350612a6692505050565b50612a25565b9250929050565b5f6001600160a01b0382111561187b5760405163c4bd89a960e01b815260040160405180910390fd5b6040805160018082528183019092525f91816020015b6060815260200190600190039081612aac57905050905085858585855f604051602001612ade96959493929190613680565b604051602081830303815290604052815f81518110612aff57612aff6132a2565b60200260200101819052507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166324856bc35f60f81b604051602001612b5d91906001600160f81b031991909116815260010190565b604051602081830303815290604052836040518363ffffffff1660e01b8152600401612b8a9291906136c2565b5f604051808303815f87803b158015612ba1575f80fd5b505af1158015612bb3573d5f803e3d5ffd5b50505050505050505050565b5f80612bc9612d91565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633323b46730306001600160a01b03166385652fec601654604051602401612c1f91815260200190565b60408051808303601f1901815291815260208201805160e094851b6001600160e01b03909116179052519185901b6001600160e01b0319168252612c8093925090869073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90600401613732565b6020604051808303815f875af1158015612c9c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612cc09190613317565b91505090565b5f612cd18383612ed6565b9392505050565b5f612ce560036014613600565b6014612cf2600382613600565b612cfc9190613600565b612d069190613600565b9091101592915050565b365f8383612d2060036014613600565b612d2b928290613827565b915091509250929050565b5f80806014612d46600382613600565b612d509190613600565b841015612d7057604051633b99b53d60e01b815260040160405180910390fd5b5050508135606081811c9460489290921c62ffffff169360170135901c9150565b6040805180820182526060808252602082015281516001818401818152608083019094529192909182919081602001602082028036833701905050815260408051600180825281830190925260209092019190816020015b6060815260200190600190039081612de95750509052805180519192505f918290612e1657612e166132a2565b60200260200101906003811115612e2f57612e2f6130e5565b90816003811115612e4257612e426130e5565b905250601654604051309182916394e05b2c91612e659160240190815260200190565b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050604051602001612ea392919061384e565b60405160208183030381529060405281602001515f81518110612ec857612ec86132a2565b602002602001018190525090565b5f6014821015612ef957604051633b99b53d60e01b815260040160405180910390fd5b50503560601c90565b5f60208284031215612f12575f80fd5b5035919050565b6001600160a01b0381168114611e5c575f80fd5b5f60208284031215612f3d575f80fd5b8135612cd181612f19565b5f8083601f840112612f58575f80fd5b50813567ffffffffffffffff811115612f6f575f80fd5b6020830191508360208260051b8501011115612a66575f80fd5b5f805f8060408587031215612f9c575f80fd5b843567ffffffffffffffff80821115612fb3575f80fd5b612fbf88838901612f48565b90965094506020870135915080821115612fd7575f80fd5b50612fe487828801612f48565b95989497509550505050565b5f610120820190508251151582526020830151600f0b6020830152604083015161302560408401826001600160801b03169052565b50606083015161304060608401826001600160801b03169052565b50608083015161305b60808401826001600160801b03169052565b5060a083015161307660a08401826001600160801b03169052565b5060c083015160c083015260e083015160e083015261010080840151818401525092915050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b8215158152604060208201525f611692604083018461309d565b634e487b7160e01b5f52602160045260245ffd5b60028110611e5c57611e5c6130e5565b5f61010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015161314b816130f9565b8060a08401525060c083015160c083015260e0830151151560e083015292915050565b604051610120810167ffffffffffffffff8111828210171561319e57634e487b7160e01b5f52604160045260245ffd5b60405290565b805167ffffffffffffffff811681146110d7575f80fd5b80516001600160801b03811681146110d7575f80fd5b8051600f81900b81146110d7575f80fd5b5f60a082840312156131f2575f80fd5b60405160a0810181811067ffffffffffffffff8211171561322157634e487b7160e01b5f52604160045260245ffd5b60405261322d836131a4565b815261323b602084016131a4565b602082015261324c604084016131bb565b604082015261325d606084016131bb565b606082015261326e608084016131d1565b60808201529392505050565b805180151581146110d7575f80fd5b5f60208284031215613299575f80fd5b612cd18261327a565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156132c6575f80fd5b813560118110612cd1575f80fd5b5f808335601e198436030181126132e9575f80fd5b83018035915067ffffffffffffffff821115613303575f80fd5b602001915036819003821315612a66575f80fd5b5f60208284031215613327575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156105655761056561332e565b5f6101208284031215613366575f80fd5b61336e61316e565b6133778361327a565b8152613385602084016131d1565b6020820152613396604084016131bb565b60408201526133a7606084016131bb565b60608201526133b8608084016131bb565b60808201526133c960a084016131bb565b60a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b838152602081018390526060810161340f836130f9565b826040830152949350505050565b5f600160ff1b82016134315761343161332e565b505f0390565b5f60a08201905086825285602083015284604083015283606083015261345c836130f9565b8260808301529695505050505050565b5f6020828403121561347c575f80fd5b8151612cd181612f19565b634e487b7160e01b5f52600160045260245ffd5b803565ffffffffffff811681146110d7575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b6001600160a01b0385811682525f906101009086356134f681612f19565b818116602086015250602087013561350d81612f19565b8181166040860152506135226040880161349b565b65ffffffffffff80821660608701528061353e60608b0161349b565b1660808701525050608087013561355481612f19565b81811660a0860152505060a086013560c08401528060e084015261357b81840185876134b0565b979650505050505050565b5f8060408385031215613597575f80fd5b8251915060208301516135a981612f19565b809150509250929050565b5f80604083850312156135c5575f80fd5b505080516020909101519092909150565b5f80604083850312156135e7575f80fd5b825191506135f76020840161327a565b90509250929050565b808201808211156105655761056561332e565b5f610120820190508a82528960208301528860408301528760608301528660808301528560a0830152613645856130f9565b8460c08301528360e08301528215156101008301529a9950505050505050505050565b5f600182016136795761367961332e565b5060010190565b60018060a01b038716815285602082015284604082015260a060608201525f6136ad60a0830185876134b0565b90508215156080830152979650505050505050565b604081525f6136d4604083018561309d565b6020838203818501528185518084528284019150828160051b8501018388015f5b8381101561372357601f1987840301855261371183835161309d565b948601949250908501906001016136f5565b50909998505050505050505050565b6001600160a01b0385168152608060208083018290525f916137569084018761309d565b838103604080860191909152865181835280519183018290528301905f9060608401905b808310156137aa57835160048110613794576137946130e5565b825292850192600192909201919085019061377a565b508885015184820394860194909452835180825281860194860193509150600582901b810185015f5b8381101561380157601f198383030186526137ef82865161309d565b958701959487019491506001016137d3565b506001600160a01b0389166060890152955061381e945050505050565b95945050505050565b5f8085851115613835575f80fd5b83861115613841575f80fd5b5050820193919092039150565b6001600160a01b03831681526040602082018190525f906116929083018461309d56fea264697066735822122004f6627243be1440f2a604c85c86b0c7b329c0223d7a426cbf3ca63d38d3522864736f6c63430008190033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ETH = "ETH";

    public static final String FUNC_GELATO = "GELATO";

    public static final String FUNC_OPS = "OPS";

    public static final String FUNC_PERMIT2 = "PERMIT2";

    public static final String FUNC_VERSION = "VERSION";

    public static final String FUNC_ADDDELEGATE = "addDelegate";

    public static final String FUNC_CHECKER = "checker";

    public static final String FUNC_COMMITTEDMARGIN = "committedMargin";

    public static final String FUNC_CONDITIONALORDERID = "conditionalOrderId";

    public static final String FUNC_DELEGATES = "delegates";

    public static final String FUNC_EXECUTE = "execute";

    public static final String FUNC_EXECUTECONDITIONALORDER = "executeConditionalOrder";

    public static final String FUNC_FREEMARGIN = "freeMargin";

    public static final String FUNC_GETCONDITIONALORDER = "getConditionalOrder";

    public static final String FUNC_GETDELAYEDORDER = "getDelayedOrder";

    public static final String FUNC_GETPOSITION = "getPosition";

    public static final String FUNC_ISAUTH = "isAuth";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REMOVEDELEGATE = "removeDelegate";

    public static final String FUNC_SETINITIALOWNERSHIP = "setInitialOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    @Deprecated
    protected Account(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Account(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Account(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Account(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> ETH() {
        final Function function = new Function(FUNC_ETH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> GELATO() {
        final Function function = new Function(FUNC_GELATO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> OPS() {
        final Function function = new Function(FUNC_OPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> PERMIT2() {
        final Function function = new Function(FUNC_PERMIT2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> VERSION() {
        final Function function = new Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> addDelegate(String _delegate) {
        final Function function = new Function(
                FUNC_ADDDELEGATE, 
                Arrays.<Type>asList(new Address(160, _delegate)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<Boolean, byte[]>> checker(BigInteger _conditionalOrderId) {
        final Function function = new Function(FUNC_CHECKER, 
                Arrays.<Type>asList(new Uint256(_conditionalOrderId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteFunctionCall<Tuple2<Boolean, byte[]>>(function,
                new Callable<Tuple2<Boolean, byte[]>>() {
                    @Override
                    public Tuple2<Boolean, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, byte[]>(
                                (Boolean) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> committedMargin() {
        final Function function = new Function(FUNC_COMMITTEDMARGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> conditionalOrderId() {
        final Function function = new Function(FUNC_CONDITIONALORDERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> delegates(String delegate) {
        final Function function = new Function(FUNC_DELEGATES, 
                Arrays.<Type>asList(new Address(160, delegate)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> execute(List<BigInteger> _commands, List<byte[]> _inputs, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_EXECUTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Uint8>(
                        Uint8.class,
                        org.web3j.abi.Utils.typeMap(_commands, Uint8.class)),
                new org.web3j.abi.datatypes.DynamicArray<DynamicBytes>(
                        DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_inputs, DynamicBytes.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> executeConditionalOrder(BigInteger _conditionalOrderId) {
        final Function function = new Function(
                FUNC_EXECUTECONDITIONALORDER, 
                Arrays.<Type>asList(new Uint256(_conditionalOrderId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> freeMargin() {
        final Function function = new Function(FUNC_FREEMARGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<ConditionalOrder> getConditionalOrder(BigInteger _conditionalOrderId) {
        final Function function = new Function(FUNC_GETCONDITIONALORDER, 
                Arrays.<Type>asList(new Uint256(_conditionalOrderId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ConditionalOrder>() {}));
        return executeRemoteCallSingleValueReturn(function, ConditionalOrder.class);
    }

    public RemoteFunctionCall<DelayedOrder> getDelayedOrder(byte[] _marketKey) {
        final Function function = new Function(FUNC_GETDELAYEDORDER, 
                Arrays.<Type>asList(new Bytes32(_marketKey)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DelayedOrder>() {}));
        return executeRemoteCallSingleValueReturn(function, DelayedOrder.class);
    }

    public RemoteFunctionCall<Position> getPosition(byte[] _marketKey) {
        final Function function = new Function(FUNC_GETPOSITION, 
                Arrays.<Type>asList(new Bytes32(_marketKey)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Position>() {}));
        return executeRemoteCallSingleValueReturn(function, Position.class);
    }

    public RemoteFunctionCall<Boolean> isAuth() {
        final Function function = new Function(FUNC_ISAUTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeDelegate(String _delegate) {
        final Function function = new Function(
                FUNC_REMOVEDELEGATE, 
                Arrays.<Type>asList(new Address(160, _delegate)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setInitialOwnership(String _owner) {
        final Function function = new Function(
                FUNC_SETINITIALOWNERSHIP, 
                Arrays.<Type>asList(new Address(160, _owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, _newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Account load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Account(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Account load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Account(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Account load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Account(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Account load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Account(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Account> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, AccountConstructorParams _params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_params));
        return deployRemoteCall(Account.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<Account> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, AccountConstructorParams _params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_params));
        return deployRemoteCall(Account.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Account> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, AccountConstructorParams _params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_params));
        return deployRemoteCall(Account.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Account> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, AccountConstructorParams _params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_params));
        return deployRemoteCall(Account.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    public static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class AccountConstructorParams extends StaticStruct {
        public String factory;

        public String events;

        public String marginAsset;

        public String perpsV2ExchangeRate;

        public String futuresMarketManager;

        public String systemStatus;

        public String gelato;

        public String ops;

        public String settings;

        public String universalRouter;

        public String permit2;

        public AccountConstructorParams(String factory, String events, String marginAsset, String perpsV2ExchangeRate, String futuresMarketManager, String systemStatus, String gelato, String ops, String settings, String universalRouter, String permit2) {
            super(new Address(160, factory),
                    new Address(160, events),
                    new Address(160, marginAsset),
                    new Address(160, perpsV2ExchangeRate),
                    new Address(160, futuresMarketManager),
                    new Address(160, systemStatus),
                    new Address(160, gelato),
                    new Address(160, ops),
                    new Address(160, settings),
                    new Address(160, universalRouter),
                    new Address(160, permit2));
            this.factory = factory;
            this.events = events;
            this.marginAsset = marginAsset;
            this.perpsV2ExchangeRate = perpsV2ExchangeRate;
            this.futuresMarketManager = futuresMarketManager;
            this.systemStatus = systemStatus;
            this.gelato = gelato;
            this.ops = ops;
            this.settings = settings;
            this.universalRouter = universalRouter;
            this.permit2 = permit2;
        }

        public AccountConstructorParams(Address factory, Address events, Address marginAsset, Address perpsV2ExchangeRate, Address futuresMarketManager, Address systemStatus, Address gelato, Address ops, Address settings, Address universalRouter, Address permit2) {
            super(factory, events, marginAsset, perpsV2ExchangeRate, futuresMarketManager, systemStatus, gelato, ops, settings, universalRouter, permit2);
            this.factory = factory.getValue();
            this.events = events.getValue();
            this.marginAsset = marginAsset.getValue();
            this.perpsV2ExchangeRate = perpsV2ExchangeRate.getValue();
            this.futuresMarketManager = futuresMarketManager.getValue();
            this.systemStatus = systemStatus.getValue();
            this.gelato = gelato.getValue();
            this.ops = ops.getValue();
            this.settings = settings.getValue();
            this.universalRouter = universalRouter.getValue();
            this.permit2 = permit2.getValue();
        }
    }

    public static class ConditionalOrder extends StaticStruct {
        public byte[] marketKey;

        public BigInteger marginDelta;

        public BigInteger sizeDelta;

        public BigInteger targetPrice;

        public byte[] gelatoTaskId;

        public BigInteger conditionalOrderType;

        public BigInteger desiredFillPrice;

        public Boolean reduceOnly;

        public ConditionalOrder(byte[] marketKey, BigInteger marginDelta, BigInteger sizeDelta, BigInteger targetPrice, byte[] gelatoTaskId, BigInteger conditionalOrderType, BigInteger desiredFillPrice, Boolean reduceOnly) {
            super(new Bytes32(marketKey),
                    new Int256(marginDelta),
                    new Int256(sizeDelta),
                    new Uint256(targetPrice),
                    new Bytes32(gelatoTaskId),
                    new Uint8(conditionalOrderType),
                    new Uint256(desiredFillPrice),
                    new Bool(reduceOnly));
            this.marketKey = marketKey;
            this.marginDelta = marginDelta;
            this.sizeDelta = sizeDelta;
            this.targetPrice = targetPrice;
            this.gelatoTaskId = gelatoTaskId;
            this.conditionalOrderType = conditionalOrderType;
            this.desiredFillPrice = desiredFillPrice;
            this.reduceOnly = reduceOnly;
        }

        public ConditionalOrder(Bytes32 marketKey, Int256 marginDelta, Int256 sizeDelta, Uint256 targetPrice, Bytes32 gelatoTaskId, Uint8 conditionalOrderType, Uint256 desiredFillPrice, Bool reduceOnly) {
            super(marketKey, marginDelta, sizeDelta, targetPrice, gelatoTaskId, conditionalOrderType, desiredFillPrice, reduceOnly);
            this.marketKey = marketKey.getValue();
            this.marginDelta = marginDelta.getValue();
            this.sizeDelta = sizeDelta.getValue();
            this.targetPrice = targetPrice.getValue();
            this.gelatoTaskId = gelatoTaskId.getValue();
            this.conditionalOrderType = conditionalOrderType.getValue();
            this.desiredFillPrice = desiredFillPrice.getValue();
            this.reduceOnly = reduceOnly.getValue();
        }
    }

    public static class DelayedOrder extends StaticStruct {
        public Boolean isOffchain;

        public BigInteger sizeDelta;

        public BigInteger desiredFillPrice;

        public BigInteger targetRoundId;

        public BigInteger commitDeposit;

        public BigInteger keeperDeposit;

        public BigInteger executableAtTime;

        public BigInteger intentionTime;

        public byte[] trackingCode;

        public DelayedOrder(Boolean isOffchain, BigInteger sizeDelta, BigInteger desiredFillPrice, BigInteger targetRoundId, BigInteger commitDeposit, BigInteger keeperDeposit, BigInteger executableAtTime, BigInteger intentionTime, byte[] trackingCode) {
            super(new Bool(isOffchain),
                    new Int128(sizeDelta),
                    new Uint128(desiredFillPrice),
                    new Uint128(targetRoundId),
                    new Uint128(commitDeposit),
                    new Uint128(keeperDeposit),
                    new Uint256(executableAtTime),
                    new Uint256(intentionTime),
                    new Bytes32(trackingCode));
            this.isOffchain = isOffchain;
            this.sizeDelta = sizeDelta;
            this.desiredFillPrice = desiredFillPrice;
            this.targetRoundId = targetRoundId;
            this.commitDeposit = commitDeposit;
            this.keeperDeposit = keeperDeposit;
            this.executableAtTime = executableAtTime;
            this.intentionTime = intentionTime;
            this.trackingCode = trackingCode;
        }

        public DelayedOrder(Bool isOffchain, Int128 sizeDelta, Uint128 desiredFillPrice, Uint128 targetRoundId, Uint128 commitDeposit, Uint128 keeperDeposit, Uint256 executableAtTime, Uint256 intentionTime, Bytes32 trackingCode) {
            super(isOffchain, sizeDelta, desiredFillPrice, targetRoundId, commitDeposit, keeperDeposit, executableAtTime, intentionTime, trackingCode);
            this.isOffchain = isOffchain.getValue();
            this.sizeDelta = sizeDelta.getValue();
            this.desiredFillPrice = desiredFillPrice.getValue();
            this.targetRoundId = targetRoundId.getValue();
            this.commitDeposit = commitDeposit.getValue();
            this.keeperDeposit = keeperDeposit.getValue();
            this.executableAtTime = executableAtTime.getValue();
            this.intentionTime = intentionTime.getValue();
            this.trackingCode = trackingCode.getValue();
        }
    }

    public static class Position extends StaticStruct {
        public BigInteger id;

        public BigInteger lastFundingIndex;

        public BigInteger margin;

        public BigInteger lastPrice;

        public BigInteger size;

        public Position(BigInteger id, BigInteger lastFundingIndex, BigInteger margin, BigInteger lastPrice, BigInteger size) {
            super(new Uint64(id),
                    new Uint64(lastFundingIndex),
                    new Uint128(margin),
                    new Uint128(lastPrice),
                    new Int128(size));
            this.id = id;
            this.lastFundingIndex = lastFundingIndex;
            this.margin = margin;
            this.lastPrice = lastPrice;
            this.size = size;
        }

        public Position(Uint64 id, Uint64 lastFundingIndex, Uint128 margin, Uint128 lastPrice, Int128 size) {
            super(id, lastFundingIndex, margin, lastPrice, size);
            this.id = id.getValue();
            this.lastFundingIndex = lastFundingIndex.getValue();
            this.margin = margin.getValue();
            this.lastPrice = lastPrice.getValue();
            this.size = size.getValue();
        }
    }
}
